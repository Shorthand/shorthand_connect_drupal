<?php

/**
 * @file
 * Install, update, and uninstall functions for the Shorthand module.
 */

use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_install().
 */
function shorthand_install($is_syncing) {
  // Do not allow to delete the forum's node type machine name.
  $locked = \Drupal::state()->get('node.type.locked');
  $locked['shorthand'] = 'shorthand';
  \Drupal::state()->set('node.type.locked', $locked);
}

/**
 * Implements hook_uninstall().
 */
function shorthand_uninstall() {
  // Allow to delete a shorthand's node type.
  $locked = \Drupal::state()->get('node.type.locked');
  unset($locked['shorthand']);
  \Drupal::state()->set('node.type.locked', $locked);

  \Drupal::configFactory()->getEditable('shorthand.settings')->delete();
  \Drupal::messenger()->addMessage(t("Shorthand module has been uninstalled successfully."));
}

/**
 * Implements hook_schema().
 */
function shorthand_schema() {
  $schema['shorthand'] = [
    'description' => 'Stores the relationship of nodes to forum terms.',
    'fields' => [
      'nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid of the node.',
      ],
      'vid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Primary Key: The {node}.vid of the node.',
      ],
    ],
    'primary key' => ['vid'],
  ];

  $schema['forum_index'] = [
    'description' => 'Maintains denormalized information about node/term relationships.',
    'fields' => [
      'nid' => [
        'description' => 'The {node}.nid this record tracks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'title' => [
        'description' => 'The node title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'sticky' => [
        'description' => 'Boolean indicating whether the node is sticky.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'created' => [
        'description' => 'The Unix timestamp when the node was created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'last_sync_timestamp' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp of the last update from shorthand.',
      ],
    ],
    'indexes' => [
      'created' => ['created'],
      'last_sync_timestamp' => ['last_sync_timestamp'],
    ],
    'foreign keys' => [
      'tracked_node' => [
        'table' => 'node',
        'columns' => ['nid' => 'nid'],
      ],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function shorthand_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    // Validate API key.
    $token = \Drupal::configFactory()
      ->getEditable('shorthand.settings')
      ->get('shorthand_token');
    if ($token && \Drupal::service('shorthand_api')->validateApiKey($token)) {
      $requirements['shorthand'] = [
        'title' => t('Shorthand'),
        'value' => t('API token'),
        'severity' => REQUIREMENT_OK,
        'description' => t('Successfully validated.'),
      ];
    }
    else {
      $requirements['shorthand'] = [
        'title' => t('Shorthand'),
        'value' => t('API token'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('Cannot be validated. Please validate <a href=":shorthand_settings">shorthand configuration</a>.', [
          ':shorthand_settings' => Url::fromRoute('shorthand.settings_form')->toString(),
        ]),
      ];
    }
  }

  return $requirements;
}
